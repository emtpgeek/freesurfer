#! /bin/csh -f

#
# svdfunctcvm-sess
#
# Original Author: Doug Greve
#
# Copyright (C) 2002-2007,
# The General Hospital Corporation (Boston, MA). 
# All rights reserved.
#
# Distribution, usage and copying of this software is covered under the
# terms found in the License Agreement file named 'COPYING' found in the
# FreeSurfer source code root directory, and duplicated here:
# https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferOpenSourceLicense
#
# General inquiries: freesurfer@nmr.mgh.harvard.edu
# Bug reports: analysis-bugs@nmr.mgh.harvard.edu
#


set VERSION = '$Id: svdfunctcvm-sess,v 1.4 2015/12/10 22:51:31 zkaufman Exp $';

set inputargs = ($argv);
set analysis = ();

if($#argv == 0) then
  goto usage_exit;
  exit 1;
endif

set n = `echo $argv | grep version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif

set PWDCMD = `getpwdcmd`;
if($status) exit 1;

set SessList = `getsesspath $argv`;
if($status || $#SessList == 0) then
  getsesspath $argv 
  exit 1;
endif

source $FREESURFER_HOME/sources.csh

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

# get full path for cfg and info files #
pushd $analysis > /dev/null;
set analysisdir = `$PWDCMD`;
popd > /dev/null;
set cfgfile  = $analysisdir/analysis.cfg
set infofile = $analysisdir/analysis.info
if(! -e $infofile) then
  echo "ERROR: cannot find $infofile"
  exit 1;
endif

## Get parameters from the info file ##
set fsd       = `cat $infofile | awk '{if($1 == "fsd") print $2}'`;
set funcstem  = `cat $infofile | awk '{if($1 == "funcstem") print $2}'`;
set parname   = `cat $infofile | awk '{if($1 == "parname") print $2}'`;
set TR        = `cat $infofile | awk '{if($1 == "TR") print $2}'`;
set tpexclude = `cat $infofile | awk '{if($1 == "tpexclude") print $2}'`;
set runlistfile = `cat $infofile | awk '{if($1 == "runlistfile") print $2}'`;

##### Create a log file ######
set logdir = `$PWDCMD`/log;
mkdir -p $logdir
if(! -e $logdir) then
  echo "WARNING: could not create $logdir"
  set LF = /dev/null
else
  set LF = $logdir/svdfunctcvm-sess-$fsd-$analysis.log
  if(-e $LF) mv $LF $LF.old
endif
echo "--------------------------------------------------------------"
echo "svdfunctcvm-sess logfile is $LF"
echo "--------------------------------------------------------------"

echo "svdfunctcvm-sess log file" >> $LF
echo $VERSION >> $LF
id            >> $LF
pwd           >> $LF
echo $0     >> $LF
echo $inputargs  >> $LF
uname -a      >> $LF
date          >> $LF

set svdsubdir = $analysis-osf

### Go through each session ###
foreach sess ($SessList)

  set sessbase = `basename $sess`;
  echo "-------------------------------------------" |& tee -a $LF
  echo "$sess " |& tee -a $LF
  date |& tee -a $LF

  if(! -d $sess) then
    echo "ERROR: $sess does not exist"   |& tee -a $LF
    exit 1;
  endif

  cd $sess/$fsd
  if($#runlistfile == 0) then
    set RunList = `getrunlist .`;
    if($status || $#RunList == 0) then
      echo "ERROR: $sess/$fsd has no runs"  |& tee -a $LF
      exit 1;
    endif
  else
    if(! -e $runlistfile) then
      echo "ERROR: ($sessbase) could not find runlistfile $runlistfile"
      exit 1;
    endif
    set RunList = (`cat $runlistfile`);
  endif

  echo "INFO ($sessbase): RunList = $RunList"

  set tcvmstem = $funcstem-tcvm

  set instems = ();
  set pars    = ();
  set tpexcludes = ();
  foreach run ($RunList)  
    set instem = $run/$funcstem
    set tpexarg = ();
    if($#tpexclude != 0) then
      set tpexfile = $run/$tpexclude
      if(-e $tpexfile) then
        set tpexarg = "-tpexclfile $tpexfile"
        echo "INFO: adding exclude file $tpexfile"
      endif
    endif
    set instems = ($instems -i $instem $tpexarg);
  end

  set cmd = (svdfunctcvm -svdsubdir $svdsubdir -tcvm $tcvmstem)
  set cmd = ($cmd -TR $TR -parname $parname -o $analysis/h)
  set cmd = ($cmd $instems $tpexcludes -cfg $cfgfile )
  echo "--------------------------------------------------------" |& tee -a $LF
  $PWDCMD # |& tee -a $LF
  echo $cmd |& tee -a $LF
  echo "--------------------------------------------------------" |& tee -a $LF

  $cmd |& tee -a $LF
  if($status) then
    echo "ERROR ($sess): svdfunctcvm failed"
    exit 1;
  endif

end

exit 0;
###############################################

############--------------##################
parse_args:
set cmdline = "$argv";
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

#    case "-cfg":
#      if ( $#argv == 0) goto arg1err;
#      set cfgfile = $argv[1]; shift;
#      if(! -e $cfgfile) then
#        echo "ERROR: $cfgfile does not exist"
#        exit 1;
#      endif
#      breaksw

    case "-a":
    case "-analysis":
      if ( $#argv == 0) goto arg1err;
      set analysis = $argv[1]; shift;
      breaksw

    case "-umask":
      if ( $#argv == 0) goto arg1err;
      setenv MRI_UMASK $1; shift;
      breaksw

#    case "-tpexclude":
#      if ( $#argv == 0) goto arg1err;
#      set tpexclude = $argv[1]; shift;
#      breaksw

    case "-verbose":
      set verbose = 1;
      breaksw

    case "-echo":
      set echo = 1;
      breaksw

    case "-debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    case "-synth":
      set synthflag = "-synth -1";
      breaksw

#    case "-motioncor":
#    case "-motioncorr":
#    case "-mc"
#      set MotionCor = 1;
#      breaksw

    case "-scriptonly":
      set ScriptOnly = 1;
      breaksw

    case "-new":
      set new = 1;
      breaksw

    case "-old":
      set new = 0;
      breaksw

    case "-g":
    case "-s":
    case "-sf":
    case "-d":
    case "-df":
      shift;
      # ignore getsesspath arguments 
      breaksw

    case "-cwd":
      # ignore getsesspath arguments 
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

  if ($#SessList == 0) then
     echo "ERROR: no sessions specified"
     exit 1
  endif

  if ($#analysis == 0) then
     echo "ERROR: no analysis name specified"
     exit 1
  endif

  if(! -d $analysis ) then
    echo "ERROR: analysis $analysis does not exist, see mkanalysis-sess"
    exit 1;
  endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo "USAGE: svdfunctcvm-sess"
  echo "Options:";
  echo "   -analysis analysisname : name of session-level functional analysis"
  echo "   -sf sessidfile  ..."
  echo "   -df srchdirfile ..."
  echo "   -s  sessid      ..."
  echo "   -d  srchdir     ..."
  echo "   -scriptonly    : don't run, just generate a script"
  echo "   -umask umask   : set unix file permission mask"
  echo "   -version       : print version and exit"
exit 1;
