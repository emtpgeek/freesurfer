#! /bin/csh -f

#
# mc-bbr
#
# Original Author: Doug Greve
#
# Copyright (C) 2002-2007,
# The General Hospital Corporation (Boston, MA). 
# All rights reserved.
#
# Distribution, usage and copying of this software is covered under the
# terms found in the License Agreement file named 'COPYING' found in the
# FreeSurfer source code root directory, and duplicated here:
# https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferOpenSourceLicense
#
# General inquiries: freesurfer@nmr.mgh.harvard.edu
# Bug reports: analysis-bugs@nmr.mgh.harvard.edu
#

# Sample to hemi with proj, native or fsaverage
# Sample to anat
# Sample to tal

set VERSION = '$Id: mc-bbr,v 1.6 2015/12/10 22:51:30 zkaufman Exp $';

set invol = ();
set outvol = ();
set outlh = ();
set outrh = ();
set outmni = ();
set template = ();
set frame = 0;
set mcdat = ();
set subject = ();
set DoPVF = 0;
set outdir = ();
set trgsubject = fsaverage
set fwhm = 0;
set TolF  = 1e-5 
set Tol1D = 1e-3
set interp = trilin
set lhmask = ();
set rhmask = ();
set mnimask = ();

set nolog = 0;
set tmpdir = ();
set cleanup = 1;
set PrintHelp = 0;

set cmdargs = ($argv);
if($#argv == 0)  goto usage_exit;
set n = `echo $argv | grep -e --version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 1;
endif
set n = `echo $argv | grep -e --help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
  exit 1;
endif

source $FREESURFER_HOME/sources.csh

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

# Output directory
mkdir -p $outdir
if($status) then
  echo "ERROR: creating $outdir"
  exit 1;
endif

# Setup the log file
if(! $nolog) then
  set LF = $outdir/mc-bbr.log
  rm -f $LF
else
  set LF = /dev/null
endif
echo "log file is $LF"
pwd >> $LF
echo $cmdargs >> $LF
date     >> $LF
id       >> $LF
hostname >> $LF
uname -a >> $LF

if($DoPVF) then
  set ctxgm = $SUBJECTS_DIR/$subject/mri/ctxgm.mgz
  if(! -e $ctxgm) then
    set ribbon = $SUBJECTS_DIR/$subject/mri/ribbon.mgz
    set cmd = (mri_binarize --i $ribbon --match 3 --match 42 --o $ctxgm)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
endif

# Tmp Dir
if($#tmpdir == 0) set tmpdir = $outdir/tmp.mc-bbr.$$
mkdir -p $tmpdir
echo "tmp dir is $tmpdir" |& tee -a $LF

# Extract Template from template volume
if($#template) then
  mri_convert $template $tmpdir/template.nii
  if($status) exit 1;
  set template = $tmpdir/template.nii
else
  set template = $tmpdir/template.nii
  set cmd = (mri_convert $invol $template --mid-frame)
  pwd |& tee -a $LF
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

# Perform the initial registration
set reg0 = $outdir/reg.template.dat
if(! -e $reg0) then
  set cmd = (bbregister --mov $template --s $subject --bold \
    --init-fsl --reg $reg0 --tol1d 1e-2 \
    --gm-proj-abs 1 --wm-proj-abs 1)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

# Get number of frames
set infotxt = /tmp/mriinfo.$$
set cmd = (mri_info --nframes --o $infotxt $invol);
echo $cmd |& tee -a $LF
$cmd |& tee -a $LF
if($status) exit 1;
set nframes = `cat $infotxt`;
echo "nframes $nframes" |& tee -a $LF

# Register each frame
@ nthframe = 0
while ($nthframe < $nframes)
  echo "#@# $nthframe/$nframes `date`" |& tee -a $LF
  set zp = `printf %04d $nthframe`

  # Extract frame
  set f = $tmpdir/f.$zp.nii
  set cmd = (mri_convert $invol $f --frame $nthframe)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;

  # Register frame to anat
  set regframe = $outdir/f.$zp.reg.dat
  if(! -e $regframe) then
    set rmsframe = $outdir/f.$zp.rms
      set paramframe = $outdir/f.$zp.param
    set mincostframe = $outdir/f.$zp.mincost
    set logframe = $outdir/f.$zp.log
    set cmd = (mri_segreg --mov $f --init-reg $reg0 \
      --out-reg $regframe --brute -4 4 4 --interp trilinear \
      --gm-proj-abs 1 --wm-proj-abs 1 --dof 6 \
      --tol $TolF --tol1d $Tol1D \
      --rms $rmsframe --param $paramframe \
      --mincost $mincostframe)
    echo $cmd |& tee -a $LF |& tee -a $logframe
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

  # Resample to template
  if($#outvol) then
    # Compute reg to template
    set regframetemp = $outdir/f.$zp.reg.temp.dat
    set cmd = (mri_matrix_multiply -im $regframe \
      -iim $reg0 -om $regframetemp)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
    set ft = $tmpdir/f.$zp.temp.nii
    set cmd = (mri_vol2vol --mov $f --targ $template \
      --reg $regframetemp --o $ft --no-save-reg --interp $interp)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
  # Sample to the left hemi
  if($#outlh) then
    set lhfile = $tmpdir/lh.$zp.temp.mgh
    set cmd = (mri_vol2surf --mov $f --reg $regframe --interp $interp\
       --projfrac 0.5 --hemi lh --o $lhfile --noreshape --cortex)
    if($#trgsubject) set cmd = ($cmd --trgsubject $trgsubject)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
  # Sample to the right hemi
  if($#outrh) then
    set rhfile = $tmpdir/rh.$zp.temp.mgh
    set cmd = (mri_vol2surf --mov $f --reg $regframe --interp $interp\
       --projfrac 0.5 --hemi rh --o $rhfile --noreshape  --cortex)
    if($#trgsubject) set cmd = ($cmd --trgsubject $trgsubject)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
  # Sample to mni305 2mm
  if($#outmni) then
    set mnifile = $tmpdir/mni.$zp.temp.nii
    set cmd = (mri_vol2vol --mov $f --reg $regframe \
       --tal --talres 2 --o $mnifile --interp $interp)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

  if($DoPVF) then
    # For partial volume correction
    set cmd = (mri_label2vol --seg $ctxgm --temp $template --reg $regframe \
      --o $tmpdir/ribbon.junk.nii --hits $tmpdir/ribbon.hits.$zp.nii \
      --pvf $outdir/ribbon.pvf.$zp.nii)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif

  @ nthframe = $nthframe + 1
end # loop over frames

# Concatenate the output in native space
if($#outvol) then
  set cmd = (mri_concat $tmpdir/f.????.temp.nii --o $outvol)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
  if($fwhm != 0) then
    set cmd = (mri_fwhm --i $outvol --o $outvol --fwhm $fwhm --smooth-only)
    if($#volmask) set cmd = ($cmd --mask $volmask)
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
endif
# Concatenate the output in left hemi
if($#outlh) then
  set cmd = (mri_concat $tmpdir/lh.????.temp.mgh --o $outlh)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
  if($fwhm != 0) then
    set cmd = (mris_fwhm --s fsaverage --hemi lh --smooth-only \
      --i $outlh --fwhm $fwhm --o $outlh)
    if($#lhmask) set cmd = ($cmd --mask $lhmask )
    echo $cmd | tee -a $LF
    $cmd | tee -a $LF
    if($status) exit 1;
  endif
endif
# Concatenate the output in right hemi
if($#outrh) then
  set cmd = (mri_concat $tmpdir/rh.????.temp.mgh --o $outrh)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
  if($fwhm != 0) then
    set cmd = (mris_fwhm --s fsaverage --hemi rh --smooth-only \
      --i $outrh --fwhm $fwhm --o $outrh)
    if($#rhmask) set cmd = ($cmd --mask $rhmask )
    echo $cmd | tee -a $LF
    $cmd | tee -a $LF
    if($status) exit 1;
  endif
endif
# Concatenate the output in mni305
if($#outmni) then
  set cmd = (mri_concat $tmpdir/mni.????.temp.nii --o $outmni)
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
  if($fwhm != 0) then
    set cmd = (mri_fwhm --i $outmni --o $outmni --smooth-only --fwhm $fwhm)
    if($#mnimask) set cmd = ($cmd --mask $mnimask);
    echo $cmd |& tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1;
  endif
endif

cat $outdir/f.????.param > $mcdat
echo $cmd |& tee -a $LF
$cmd |& tee -a $LF
if($status) exit 1;

if($DoPVF) then
  set cmd = (mri_concat $outdir/ribbon.pvf.????.nii --o pvf.nii);
  echo $cmd |& tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1;
endif

## Clean up 
if($cleanup) then
  echo "... cleaning up ...." |& tee -a $LF
  rm -r $tmpdir
endif

date |& tee -a $LF
echo "mc-bbr done" |& tee -a $LF

exit 0;

############--------------##################
parse_args:
set cmdline = ($argv)
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--i":
      if($#argv < 1) goto arg1err;
      set invol = $argv[1]; shift;
      breaksw

    case "--o":
      if($#argv < 1) goto arg1err;
      set outvol = $argv[1]; shift;
      breaksw

    case "--volmask":
      if($#argv < 1) goto arg1err;
      set volmask = $argv[1]; shift;
      breaksw

    case "--olh":
      if($#argv < 1) goto arg1err;
      set outlh = $argv[1]; shift;
      breaksw

    case "--lhmask":
      if($#argv < 1) goto arg1err;
      set lhmask = $argv[1]; shift;
      breaksw

    case "--orh":
      if($#argv < 1) goto arg1err;
      set outrh = $argv[1]; shift;
      breaksw

    case "--rhmask":
      if($#argv < 1) goto arg1err;
      set rhmask = $argv[1]; shift;
      breaksw

    case "--trgsubject":
      if($#argv < 1) goto arg1err;
      set trgsubject = $argv[1]; shift;
      breaksw

    case "--fwhm":
      if($#argv < 1) goto arg1err;
      set fwhm = $argv[1]; shift;
      breaksw

    case "--omni":
      if($#argv < 1) goto arg1err;
      set outmni = $argv[1]; shift;
      breaksw

    case "--mnimask":
      if($#argv < 1) goto arg1err;
      set mnimask = $argv[1]; shift;
      breaksw

    case "--s":
      if($#argv < 1) goto arg1err;
      set subject = $argv[1]; shift;
      breaksw

    case "--sd":
      if($#argv < 1) goto arg1err;
      setenv SUBJECTS_DIR $argv[1]; shift;
      breaksw

    case "--mcdat":
      if($#argv < 1) goto arg1err;
      set mcdat = $argv[1]; shift;
      breaksw

    case "--t":
      if($#argv < 1) goto arg1err;
      set template = $argv[1]; shift;
      breaksw

    case "--frame":
      if($#argv < 1) goto arg1err;
      set frame = $argv[1]; shift;
      breaksw

    case "--pvf":
      set DoPVF = 1;
      breaksw

    case "--odir":
      if ($#argv < 1) goto arg1err;
      set outdir = $argv[1]; shift;
      breaksw

    case "--tmpdir":
    case "--tmp":
      if($#argv < 1) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      breaksw

    case "--cleanup":
      set cleanup = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

if($#invol == 0) then
  echo "ERROR: must specify an input volume"
  exit 1;
endif
if(! -e $invol) then
  echo "ERROR: cannot find $invol"
  exit 1;
endif
if($#outvol == 0 && $#outdir == 0) then
  echo "ERROR: must specify an output volume/dir"
  exit 1;
endif
if($#template != 0) then
  if(! -e $template) then 
    echo "ERROR: cannot find template volume $template"
    exit 1;
  endif
endif
if($#subject == 0) then
  echo "ERROR: must spec subject"
  exit 1;
endif
if(! -e $SUBJECTS_DIR/$subject) then
  echo "ERROR: cannot find $subject in $SUBJECTS_DIR"
  exit 1;
endif
if($#mcdat == 0) then
  set instem = `fname2stem $invol`
  set mcdat = $instem.mcdat
endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo "mc-bbr"
  echo ""
  echo " Required:";
  echo "   --i invol   : input  volume "
  echo "   --o outvol  : output volume "
  echo "   --s subject : freesurfer subject"
  echo "   --odir dir  : output directory"
  echo ""
  echo " Options:";
  echo "   --t templatevol   : default is to use mid-frame of input volume"
  echo "   --frame frame     : 0-based frame of template "
  echo "   --mcdat mcdatfile : text file with mc parameters"
  echo ""
  echo "   --sd SUBJECTS_DIR"
  echo "   --nocleanup    : do not delete temporary files"
  echo "   --cleanup      : force cleanup"
  echo ""
  echo "   --help"
  echo "   --version : print version and exit"
  echo ""

  if(! $PrintHelp) exit 1;

  echo $VERSION

  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'

exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP

Front-end for motion correction with bbregister


