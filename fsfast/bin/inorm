#! /bin/csh -f

#
# inorm
#
# fMRI Intensity normalization program
#
# Original Author: Doug Greve
#
# Copyright (C) 2002-2007,
# The General Hospital Corporation (Boston, MA). 
# All rights reserved.
#
# Distribution, usage and copying of this software is covered under the
# terms found in the License Agreement file named 'COPYING' found in the
# FreeSurfer source code root directory, and duplicated here:
# https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferOpenSourceLicense
#
# General inquiries: freesurfer@nmr.mgh.harvard.edu
# Bug reports: analysis-bugs@nmr.mgh.harvard.edu
#


set inputargs = ($argv);
set INORM_VER = '$Id: inorm,v 1.5 2015/12/10 22:51:30 zkaufman Exp $';

set n = `echo $argv | grep version | wc -l` 
if($n != 0) then
  echo $INORM_VER
  exit 0;
endif

#echo "Shell version: $version"  # version of csh

set instem  = ();
set TR = 1;
set monly = 0;
set thresh = .75;
set mask = ();

#set outstem = ();
#set ReportOnly = 0;
#set MeanVal    = 1000;
#set FirstSlice =  0;
#set Nslices    = 16;
#set BFileExt    = bshort;
#set BFileOutExt = bshort;
#set SynthData = 0;
#set meanstem = ();
#set segstem = ();

if ( $#argv == 0 ) then
  echo "USAGE: inorm [-options] -i instem <-o outstem>";
  echo "   instem   - prefix of input files";
  echo "Options:";
  echo "   outstem  - (optional) prefix of .bfloat output files"
  echo "   -thresh  threshold : fraction of mean global mean to separate tissue and air ($thresh)"
  echo "   -TR TR"
  echo "   -pixsize    val : pixel size"
  echo "   -slicethick val : slice thickness"
  echo "   -seqname  name  : name of acquisition sequence"
  #echo "   -rescale    target : globaly rescale mean MRI to target (1000)"
  #echo "   -segstem  stem     : volume stem in which to save the seg mask";
  #echo "   -meanstem stem     : volume stem in which to save the mean image";
  #echo "   -reportonly        : only produce a report"
  #echo "   -bfloat            : produce bfloat files instead of bshort"
  echo "   -umask umask       : set unix file permission mask"
  echo "   -monly mfile       : don't run, just generate a matlab file"
  echo "   -version           : print version and exit"
  echo ""
  echo "  $INORM_VER"
  echo "  Comments or questions: analysis-bugs@nmr.mgh.harvard.edu"
  echo ""
  exit 1;
endif

set PWDCMD = `getpwdcmd`;

source $FREESURFER_HOME/sources.csh

goto parse_args;
parse_args_return:

goto check_params;
check_params_return:

set MATLAB = `getmatlab`;
if($status) then
  echo "ERROR: cannot find matlab"
  exit 1;
endif

#### Output Directory #######
#if($#outstem > 1) then
#  set OutDir  = `dirname  $outstem`;
#  set OutBase = `basename $outstem`;
#  mkdir -p $OutDir;
#endif

set InDir = `dirname $instem`;
set LF = $InDir/inorm.log
if( -e $LF ) mv $LF $LF.old

echo "Log file is $LF"

date    >> $LF
$PWDCMD >> $LF
echo $inputargs >> $LF

if ($monly) then
  set QuitOnError = 0;
  rm -f $mfile;
else
  set mfile = /tmp/inorm_$$.m
  set QuitOnError = 1;
endif  

## Set path for matlab file ##
set MLF = $mfile  

echo "inorm matlab file is $MLF" | tee -a $LF
rm -f $MLF;

if($#mask == 0) then
  echo "%%% ----------------- %%"       >> $MLF;
  echo "% matlab file to run inorm"    >> $MLF;
  echo "% This is a temporary file and may be deleted" >> $MLF;
  echo "% $MLF"                          >> $MLF;
  echo "global QuitOnError;"             >> $MLF;
  echo "QuitOnError = $QuitOnError;"     >> $MLF;
  set c = "";
  echo -n "r = fast_inorm("     >> $MLF;
  foreach arg ($inputargs)
    echo -n "$c '$arg'"      >> $MLF;
    set c = ",";
  end
  echo -n ");" >> $MLF;
  echo " "  >> $MLF;
  if(! $monly ) then
    echo "quit; "  >> $MLF;
    echo " "  >> $MLF;
  endif
else
#------------------------------------#
tee $MLF > /dev/null <<EOF

tic;
instem = '$instem';
maskstem = '$mask';

mask = fast_ldbslice(maskstem);
if(isempty(mask))
  fprintf('ERROR: could not load %s\n',maskstem);
  return;
end
nmask = length(find(mask > 0.5));
if(nmask == 0)
  fprintf('ERROR: no mask voxels found\n');
  return;
end

[nr nc ns] = size(mask);
fsum = 0;
nsum = 0;
for slice = 1:ns
  ind = find(mask(:,:,slice));
  nind = length(ind);
  if(isempty(ind)) continue; end

  f = fast_ldbslice(instem,slice-1);
  if(isempty(f))
    fprintf('ERROR: could not load %s\n',instem);
    return;
  end

  [fnr fnc ntp] = size(f);
  f = reshape(f,[fnr*fnc ntp])';
  fsum = fsum + sum(reshape1d(f(:,ind)));
  nsum = nsum + nind*ntp;

end
fmn = fsum/nsum;
fprintf('nsum = %d, fsum = %g, fmn = %g\n',...
        nsum,fsum,fmn);

fname = sprintf('%s.meanval',instem);
fp = fopen(fname,'w');
if(fp == -1)
  fprintf('ERROR: could not open %s',fname);
  return;
end
fprintf(fp,'%g\n',fmn);
fclose(fp);

fprintf('inorm done (%g)\n',toc);

EOF
#------------------------------------#

endif



echo "----------- Matlab file --------------" | tee -a $LF
cat $MLF | tee -a $LF
echo " " | tee -a $LF
echo "-----------------------------------" | tee -a $LF

if(! $monly ) then
  echo "------------------------------------------" | tee -a $LF
  echo "------- matlab output --------------------" | tee -a $LF
  cat $MLF | $MATLAB -display iconic  | tee -a $LF
  #set mlcmd = `basename $MLF .m`;
  #echo "$mlcmd" | $MATLAB -display iconic 
  rm $MLF
endif

echo " " | tee -a $LF
echo " " | tee -a $LF
date | tee -a $LF
echo "inorm: finished" | tee -a $LF

exit 0;

############--------------##################
parse_args:

set cmdline = "$argv";
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-i":
      if ( $#argv == 0) goto arg1err;
      set instem = $argv[1]; shift;
      breaksw

    case "-meanstem":
      if ( $#argv == 0) goto arg1err;
      set meanstem = $argv[1]; shift;
      breaksw

    case "-segstem":
      if ( $#argv == 0) goto arg1err;
      set segstem = $argv[1]; shift;
      breaksw

    case "-o":
      if ( $#argv == 0) goto arg1err;
      if ( $#outstem != 0 ) then
        echo ERROR: only one outstem allowed.
        exit 1
      endif
      set outstem = $argv[1]; shift;
      breaksw

    case "-firstslice":
    case "-fs":
      if ( $#argv == 0) goto arg1err;
      set firstslice = $argv[1]; shift;
      breaksw

    case "-nslices":
    case "-ns":
      if ( $#argv == 0) goto arg1err;
      set Nslices = $argv[1]; shift;
      breaksw

    case "-thresh":
      if ( $#argv == 0) goto arg1err;
      set thresh = $argv[1]; shift;
      breaksw

    case "-mask":
      if ( $#argv == 0) goto arg1err;
      set mask = $argv[1]; shift;
      breaksw

    case "-TR":
      if ( $#argv == 0) goto arg1err;
      set TR = $argv[1]; shift;
      breaksw

    case "-pixsize":
    case "-ps":
    case "-ipr":
      if ( $#argv == 0) goto arg1err;
      set pixsize = $argv[1]; shift;
      breaksw

    case "-slicethick":
    case "-st":
    case "-bpr":
      if ( $#argv == 0) goto arg1err;
      set slicethick = $argv[1]; shift;
      breaksw

    case "-seqname":
      if ( $#argv == 0) goto arg1err;
      set seqname = $argv[1]; shift;
      breaksw

    case "-rescale":
    case "-meanval":
    case "-mv":
      if ( $#argv == 0) goto arg1err;
      set MeanVal = $argv[1]; shift;
      breaksw

    case "-reportonly":
    case "-ro":
      set ReportOnly = 1;
      breaksw

    case "-synthdata":
      set SynthData = 1;
      breaksw

    case "-bfloat":
      set BFileOutExt  = bfloat;
      breaksw

    case "-bshort":
      set BFileOutExt  = bfloat;
      breaksw

    case "-monly":
      if ( $#argv == 0) goto arg1err;
      set mfile = $argv[1]; shift;
      set monly = 1; 
      breaksw

    case "-debug":
      set verbose = 1;
      breaksw

    case "-echo":
      set echo = 1;
      breaksw

    case "-debug":
      set echo = 1;
      set verbose = 1;
      breaksw

    case "-umask":
      if ( $#argv == 0) goto arg1err;
      set umaskarg = "-umask $argv[1]";
      umask $argv[1]; shift;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized.
      echo $cmdline
      exit 1
      breaksw
  endsw

end
goto parse_args_return;
############--------------##################

############--------------##################
check_params:
  if($#instem == 0) then
    echo "ERROR: must specify an input stem";
    exit 1
  endif

  set i0 = $instem"_000.hdr";
  if(! -e $i0) then
    echo "ERROR: could not find $i0"
    exit 1;
  endif

goto check_params_return;
############--------------##################


############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################


